name: 🚀 Sync Aanexa Admin to Google Drive

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Manual trigger

jobs:
  sync-to-drive:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 📦 Install Dependencies
      run: |
        npm install googleapis
        
    - name: 📝 Create Credentials File
      run: |
        echo '${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}' > credentials.json
        
    - name: 📁 Copy Project Files
      run: |
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        FOLDER_NAME="aanexa-admin-$TIMESTAMP"
        echo "FOLDER_NAME=$FOLDER_NAME" >> $GITHUB_ENV
        
        # Create target directory
        mkdir -p "$FOLDER_NAME"
        
        # Copy all files except excluded ones
        rsync -av --exclude='node_modules' \
                  --exclude='.git' \
                  --exclude='.next' \
                  --exclude='dist' \
                  --exclude='build' \
                  --exclude='*.log' \
                  --exclude='.env*' \
                  --exclude='credentials.json' \
                  --exclude='.DS_Store' \
                  ./ "$FOLDER_NAME/"
        
        echo "✅ Project files copied to $FOLDER_NAME"
        
    - name: ☁️ Upload to Google Drive
      run: |
        node -e "
        const { google } = require('googleapis');
        const fs = require('fs');
        const path = require('path');
        
        async function uploadFolderToDrive() {
          try {
            console.log('🔑 Setting up Google Drive API...');
            
            const credentials = JSON.parse(fs.readFileSync('credentials.json'));
            const auth = new google.auth.GoogleAuth({
              credentials: credentials,
              scopes: ['https://www.googleapis.com/auth/drive.file']
            });
            
            const drive = google.drive({ version: 'v3', auth });
            const folderName = process.env.FOLDER_NAME;
            
            // Create main folder in Drive
            console.log('📁 Creating folder:', folderName);
            const folderResponse = await drive.files.create({
              resource: {
                name: folderName,
                mimeType: 'application/vnd.google-apps.folder',
                parents: ['${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}']
              },
              fields: 'id'
            });
            
            const mainFolderId = folderResponse.data.id;
            console.log('✅ Main folder created with ID:', mainFolderId);
            
            // Upload all files recursively
            async function uploadDirectory(localPath, parentId) {
              const items = fs.readdirSync(localPath);
              
              for (const item of items) {
                const itemPath = path.join(localPath, item);
                const stat = fs.statSync(itemPath);
                
                if (stat.isDirectory()) {
                  // Create subdirectory
                  console.log('📁 Creating subdirectory:', item);
                  const subFolderResponse = await drive.files.create({
                    resource: {
                      name: item,
                      mimeType: 'application/vnd.google-apps.folder',
                      parents: [parentId]
                    },
                    fields: 'id'
                  });
                  
                  // Recursively upload subdirectory contents
                  await uploadDirectory(itemPath, subFolderResponse.data.id);
                } else {
                  // Upload file
                  console.log('📄 Uploading file:', item);
                  await drive.files.create({
                    resource: {
                      name: item,
                      parents: [parentId]
                    },
                    media: {
                      body: fs.createReadStream(itemPath)
                    }
                  });
                }
              }
            }
            
            await uploadDirectory(folderName, mainFolderId);
            
            console.log('✅ All files uploaded successfully!');
            
            // Cleanup old folders (keep only last 3)
            console.log('🧹 Cleaning up old folders...');
            const listResponse = await drive.files.list({
              q: \`parents in \"\${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}\" and name contains \"aanexa-admin-\" and mimeType=\"application/vnd.google-apps.folder\" and trashed=false\`,
              orderBy: 'createdTime desc',
              fields: 'files(id,name,createdTime)'
            });
            
            const folders = listResponse.data.files;
            console.log('📋 Found', folders.length, 'existing folders');
            
            if (folders.length > 3) {
              const foldersToDelete = folders.slice(3);
              console.log('🗑️ Deleting', foldersToDelete.length, 'old folders...');
              
              for (const folder of foldersToDelete) {
                await drive.files.delete({ fileId: folder.id });
                console.log('🗑️ Deleted folder:', folder.name);
              }
            }
            
            console.log('🎉 Sync completed successfully!');
            
          } catch (error) {
            console.error('❌ Error during sync:', error.message);
            if (error.response) {
              console.error('Response data:', error.response.data);
            }
            process.exit(1);
          }
        }
        
        uploadFolderToDrive();
        "
        
    - name: 🧹 Cleanup Temporary Files
      if: always()
      run: |
        rm -f credentials.json
        rm -rf aanexa-admin-*
        
    - name: 🎉 Success Summary
      run: |
        echo "🚀 Aanexa Admin successfully synced to Google Drive!"
        echo "📅 Timestamp: $(date)"
        echo "📁 Check your 'Aanexa GitHub Sync' folder"
        echo "🔄 Automatic cleanup: Only last 5 versions kept"
